#include "mipgen_common.hlsl"

[[vk::binding(0, 0)]] Texture2D<float4> g_Source;
[[vk::binding(1, 0)]] RWTexture2D<float4> g_Destination;

struct MipgenPushConstants
{
    uint SrcWidth;
    uint SrcHeight;
    uint DstWidth;
    uint DstHeight;
    uint SrcLevel;
    uint Options;
};

[[vk::push_constant]]
MipgenPushConstants g_Params;

[numthreads(8, 8, 1)]
void main(uint3 dispatchThreadID : SV_DispatchThreadID)
{
    uint2 dstCoord = dispatchThreadID.xy;
    if (dstCoord.x >= g_Params.DstWidth || dstCoord.y >= g_Params.DstHeight)
    {
        return;
    }

    uint2 srcBase = dstCoord * 2;
    uint2 srcSize = uint2(g_Params.SrcWidth, g_Params.SrcHeight);
    uint2 maxCoord = max(srcSize - 1, uint2(0, 0));

    uint2 fetchCoords[4];
    fetchCoords[0] = ClampCoord(srcBase, maxCoord);
    fetchCoords[1] = ClampCoord(srcBase + uint2(1, 0), maxCoord);
    fetchCoords[2] = ClampCoord(srcBase + uint2(0, 1), maxCoord);
    fetchCoords[3] = ClampCoord(srcBase + uint2(1, 1), maxCoord);

    float3 accumLinear = float3(0.0f, 0.0f, 0.0f);
    float accumAlpha = 0.0f;

    [unroll]
    for (uint i = 0; i < 4; ++i)
    {
        float4 sample = g_Source.Load(int3(fetchCoords[i], g_Params.SrcLevel));
        accumLinear += SrgbToLinear(sample.rgb);
        accumAlpha += sample.a;
    }

    float3 linearAvg = accumLinear * 0.25f;
    float alphaAvg = accumAlpha * 0.25f;

    float3 srgb = saturate(LinearToSrgb(linearAvg));
    g_Destination[dstCoord] = float4(srgb, saturate(alphaAvg));
}
